import { useEffect, useState } from "react";



import Head from "next/head";



import { useFetch } from "@hooks/useFetch";



import { OperationsComponents } from "./components";
// queries
import { getOperationsVersionTwo } from "./queries";


export default function Operations() {
  const [data, setData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [filters, setFilters] = useState({
    opId: "",
    billId: "",
    investor: "",
  });

  const [commission, setCommission] = useState(0);
  const [page, setPage] = useState(1);
  const [calcs, setCalcs] = useState({});
  const {
    fetch: getOperationsFetch,
    loading: loadingGetOperations,
    error: errorGetOperations,
    data: dataGetOperations,
  } = useFetch({
    service: () => getOperationsVersionTwo({ ...filters, page }),
    init: true,
  });

  let dataCount = dataGetOperations?.count || 0;

  const filtersHandlers = {
    value: filters,
    set: setFilters,
    get: getOperationsFetch,
    loading: loadingGetOperations,
    error: errorGetOperations,
    data: dataGetOperations?.results || {},
  };

  useEffect(() => {
    getOperationsFetch();
  }, [filters.opId, filters.billId, filters.investor,filters.startDate, filters.endDate, page]);
  
  useEffect(() => {
    if (dataGetOperations) {
      dataCount = dataGetOperations?.count || 0;
      const preOperations = dataGetOperations.results.filter(
        (x) => x.status >= 3 || x.status == 1
      );

      setFilteredData(preOperations);

      if (preOperations?.length == 0) filtersHandlers.data.calcs = {};
    }
  }, [dataGetOperations]);

  useEffect(() => {
    if (dataGetOperations) {
      const checkOperations = dataGetOperations?.results.map(row => {
        const opExpiration = new Date(row.opExpiration + " " + "00:00:00");
        const today = new Date();
        if (opExpiration < today && row.status != 4) {
          return {
            ...row,
            status:5
          }
        }
        return row
      });
      const preOperations = checkOperations.filter(
        (x) => x.status >= 3 || x.status == 1
      );
      setData(preOperations);
      
      setCalcs(dataGetOperations?.results[0]?.calcs);
    }
  }, [dataGetOperations, loadingGetOperations, errorGetOperations]);
  console.log("dataGetOperations",dataGetOperations?.results[0]?.calcs);
  return (
    <>
      <Head>
        <title>Consulta de operaciones</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <OperationsComponents
        rows={data}
        calcs={calcs}
        filtersHandlers={filtersHandlers}
        getOperationsFetch={getOperationsFetch}
        dataGetOperations={dataGetOperations}
        loadingGetOperations={loadingGetOperations}
        page={page}
        setPage={setPage}
        dataCount={dataCount}
      />
    </>
  );
}