name: Build & Deploy TEST

on:
  push:
    branches:
      - development

jobs:
  deploy_to_droplet:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    name: Deploy to Droplet
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY_TEST }}
          known_hosts: ${{ secrets.SSH_HOST_TEST }}

      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SSH_HOST_TEST }}
          username: ${{ secrets.SSH_USERNAME_TEST }}
          key: ${{ secrets.SSH_KEY_TEST }}
          port: ${{ secrets.SSH_PORT_TEST }}
          script: |
            set -e
            echo "Connecting to the server..."
            cd "${{ secrets.TEST_FOLDER }}"
            echo "Pulling latest changes from development branch..."
            git pull origin development
            echo "Removing old build artifacts..."
            rm -rf .next node_modules package-lock.json
            echo "Checking if nvm is installed..."
            if ! command -v nvm &> /dev/null
            then
              echo "nvm not found, installing nvm..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
            else
              echo "nvm is already installed"
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
            fi
            echo "Installing Node.js 18.17.0 using nvm..."
            nvm install 18.17.0
            nvm use 18.17.0
            echo "Node.js version:"
            node -v
            echo "npm version:"
            npm -v
            echo "Setting Node.js memory limit to 2048 MB..."
            export NODE_OPTIONS=--max-old-space-size=2048
            echo "Installing npm dependencies..."
            npm ci
            echo "Setting up environment variables..."
            echo "${{ secrets.DOT_ENV_TEST }}" > .env
            echo "Building the project..."
            npm run build
            echo "Deploying the application with Docker..."
            sudo docker compose --env-file docker.env up --build -d

      - name: Notify on failure
        if: failure()
        run: echo "Deployment failed. Please check the logs for more details."
